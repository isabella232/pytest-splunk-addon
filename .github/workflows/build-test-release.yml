name: Build Test Release

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop]

# concurrency:
#   group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
#   cancel-in-progress: true

jobs:
  compliance-dependencies:
    name: Compliance Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: ort-action
        uses: splunk/addonfactory-ort-action@v1
        id: ort-action
        with:
          WorkDir: .
          UsePython3: "3.7"
      - name: ort-action-artifacts-reports
        uses: actions/upload-artifact@v2
        with:
          name: analysis-reports
          path: |
            .ort/reports/*
        if: always()
      - name: ort-action-artifacts-analyzer
        uses: actions/upload-artifact@v2
        with:
          name: analysis-analyzer
          path: |
            .ort/analyzer/*
        if: always()
  
  compliance-copyrights:
    name: Compliance Copyright Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check License Header
        uses: apache/skywalking-eyes@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - uses: pre-commit/action@v2.0.3

  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    steps:
      - uses: actions/checkout@v2
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}
  
  snyk:
    name: security-vuln-snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - uses: snyk/actions/setup@master
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: "1.13"
      - name: Snyk monitor
        run: snyk test --sarif-file-output=snyk-scan_requirements.sarif --all-projects --print-deps --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: snyk-results
          path: snyk-scan_requirements.sarif
  
  review_secrets:
    name: security-detect-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: "0"
      - name: Trufflehog Actions Scan
        uses: edplato/trufflehog-actions-scan@v0.9j-beta
        with:
          scanArguments: "--max_dept 50 -x .github/workflows/exclude-patterns.txt"
  
  review-dog-misspell:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run misspell with reviewdog
      uses: reviewdog/action-misspell@v1.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
  
  test-splunk-external:
    runs-on: ubuntu-latest
    name: Test splunk external
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        splunk-version: ['8.1','8.2']
    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up OS=${{ matrix.os }}::Python=${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup kubernetes cluster
        id: kubernetes
        run: |
          ./k3s.sh
          kubectl get no
      - name: Setup Splunk-Operator at cluster-scope
        run: |
          wget -O splunk-operator.yaml https://github.com/splunk/splunk-operator/releases/download/1.0.5/splunk-operator-cluster.yaml
          kubectl apply -f splunk-operator.yaml
          sleep 30
          kubectl get ns
          kubectl get pods -A
      - name: Setup for testing
        run: |
          pip install git+https://github.com/pixelb/crudini
          mkdir test-results-${{ matrix.splunk-version }}
          pip install https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.1.tar.gz
          ./spl_generation.sh
      - name: Splunk Up
        run: |
          export NAMESPACE_NAME=ta-fiction-external
          export SPLUNK_ADDON=TA_fiction-0.0.0-dev
          export SPLUNK_VERSION=${{ matrix.splunk-version }}
          echo $SPLUNK_VERSION
          eval "echo \"$(cat ./pytest_splunk_addon/k8s_manifests/splunk_standalone/namespace.yaml)\"" >> ./namespace_updated.yaml
          eval "echo \"$(cat ./pytest_splunk_addon/k8s_manifests/splunk_standalone/splunk_standalone.yaml)\"" >> ./splunk_standalone_updated.yaml
          kubectl apply -f ./namespace_updated.yaml
          kubectl run nginx -n $NAMESPACE_NAME --image=nginx --port=80 --expose
          kubectl wait pod nginx --for=condition=ready --timeout=300s -n $NAMESPACE_NAME
          kubectl cp ./tests/src/$SPLUNK_ADDON.spl nginx:/usr/share/nginx/html -n $NAMESPACE_NAME
          cat ./pytest_splunk_addon/k8s_manifests/splunk_standalone/addon_information.yaml >> ./addon_information_updated.yaml
          echo "        - http://nginx//$SPLUNK_ADDON.spl" >> ./addon_information_updated.yaml
          grep -v ^\# ./addon_information_updated.yaml | grep . >> ./splunk_standalone_updated.yaml
          kubectl create secret generic splunk-$NAMESPACE_NAME-secret --from-literal='password=Chang3d!' --from-literal='hec_token=9b741d03-43e9-4164-908b-e09102327d22' -n $NAMESPACE_NAME
          kubectl apply -f ./splunk_standalone_updated.yaml -n $NAMESPACE_NAME
          sleep 30
          kubectl wait pod splunk-s1-standalone-0 --for=condition=ready --timeout=900s -n $NAMESPACE_NAME
          kubectl port-forward svc/splunk-s1-standalone-service -n $NAMESPACE_NAME 8000:8000 8088:8088 8089:8089 9997:9997 &
          sleep 30
      - name: Install dependencies
        run: |
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
          curl https://pyenv.run | bash
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          pyenv install 3.7.8
          pyenv local 3.7.8
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          source ~/.poetry/env
      - name: Test with pytest
        run: |
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          source ~/.poetry/env
          kubectl get pods -A
          ls -al ./tests/src/
          poetry install
          poetry run pytest -v -m external --junitxml=test-results-${{ matrix.splunk-version }}/test.xml
          ls -al
      - uses: actions/upload-artifact@v2.2.4
        if: always()
        with:
          name: splunk ${{ matrix.splunk-version }} external test artifacts
          path: |
            test-results-${{ matrix.splunk-version }}
  
  test-splunk-doc:
    name: Test Docs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up OS=${{ matrix.os }}::Python=${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
          curl https://pyenv.run | bash
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          pyenv install 3.7.8
          pyenv local 3.7.8
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          source ~/.poetry/env
      - name: Test with pytest
        run: |
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"          
          source ~/.poetry/env
          poetry install
          poetry run pytest -v --splunk-version=${{ matrix.splunk-version }} -m doc

  test-splunk-matrix:
    name: Test Matrix
    runs-on: {{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
        splunk-version: ['8.1', '8.2']
    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup kubernetes cluster
        id: kubernetes
        run: |
          ./k3s.sh
          kubectl get no
      - name: Setup Splunk-Operator
        run: |
          wget -O splunk-operator.yaml https://github.com/splunk/splunk-operator/releases/download/1.0.5/splunk-operator-cluster.yaml
          kubectl apply -f splunk-operator.yaml
          sleep 30
          kubectl get ns
          kubectl get pods -A
      - name: Set up OS=${{ matrix.os }}::Python=${{ matrix.python-version }}::Splunk=${{ matrix.splunk-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
          curl https://pyenv.run | bash
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          pyenv install 3.7.8
          pyenv local 3.7.8
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          source ~/.poetry/env
      - name: Test with pytest
        run: |
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          source ~/.poetry/env
          kubectl get pods -A
          pip install https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.1.tar.gz
          ./spl_generation.sh
          ls -al ./tests/src/
          poetry install
          poetry run pytest -v --splunk-version=${{ matrix.splunk-version }} -m kubernetes

  test-splunk-unit:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install dependencies
        run: |
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
          curl https://pyenv.run | bash
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          pyenv install 3.7.8
          pyenv local 3.7.8
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          source ~/.poetry/env
      - name: Test with pytest
        run: |
          export PATH="~/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          source ~/.poetry/env
          poetry install
          poetry run coverage run --source=./pytest_splunk_addon/standard_lib -m pytest -v tests/unit
          poetry run coverage html
      - name: Archive test coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-unit-tests
          path: htmlcov

  publish:
    name: publish
    needs:
      - pre-commit
      - compliance-dependencies
      - compliance-copyrights
      - test-splunk-external
      - test-splunk-doc
      - test-splunk-matrix
      - test-splunk-unit
      - review_secrets
      - review-dog-misspell
    runs-on: ubuntu-latest
    env:
      NEEDS: ${{ toJson(needs) }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Very Important semantic-release won't trigger a tagged
          # build if this is not set false
          submodules: false
          persist-credentials: false
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install Poetry
        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
      - name: Build
        run: |
          # shellcheck disable=SC1090
          source "$HOME/.poetry/env"
          poetry build
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Package
          path: dist/
      - name: check if tests have passed or skipped
        if: github.event_name != 'pull_request'
        id: check
        shell: bash
        run: |
          RUN_PUBLISH=`echo $NEEDS | jq ".[] |  select(  ( .result != \"skipped\" ) and .result != \"success\" ) | length == 0"`
          if [[ $RUN_PUBLISH != *'false'* ]]
          then
              echo "::set-output name=run-publish::true"
          else
              echo "::set-output name=run-publish::false"
          fi
      - name: exit without publish
        if: ${{ steps.check.outputs.run-publish == 'false' || github.event_name == 'pull_request'}}
        run: |
          echo " some test job failed. "
          exit 1
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.4
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  
  update-semver:
    name: Move Repository semver tags
    if: startsWith(github.ref, 'refs/tags/v')
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: haya14busa/action-update-semver@v1
